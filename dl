package com.example;

import org.yaml.snakeyaml.Yaml;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class ServiceScanner {

    public static List<Service> scanForServices(File rootDir) {
        List<Service> services = new ArrayList<>();
        if (rootDir != null && rootDir.isDirectory()) {
            scanDirectory(rootDir, services);
        } else {
            System.out.println("‚ùå Le dossier s√©lectionn√© n'est pas valide.");
        }
        return services;
    }

    private static void scanDirectory(File directory, List<Service> services) {
        for (File subDir : Objects.requireNonNull(directory.listFiles(File::isDirectory))) {
            File pomFile = new File(subDir, "pom.xml");
            File configFile = new File(subDir, "config-local/application-dev.yml");

            System.out.println("üîç V√©rification du dossier : " + subDir.getAbsolutePath());

            if (pomFile.exists() && configFile.exists()) {
                System.out.println("‚úÖ Service trouv√© : " + pomFile.getAbsolutePath());
                String artifactId = extractArtifactId(pomFile);
                String port = extractServerPort(configFile);
                services.add(new Service(artifactId, port, "üî¥ Stopp√©"));
            } else {
                // üîÑ Continuer √† explorer les sous-dossiers (r√©cursion)
                scanDirectory(subDir, services);
            }
        }
    }

    private static String extractArtifactId(File pomFile) {
        try (Scanner scanner = new Scanner(pomFile)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (line.startsWith("<artifactId>")) {
                    return line.replaceAll("<artifactId>(.*?)</artifactId>", "$1").trim();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "Inconnu";
    }

    private static String extractServerPort(File configFile) {
        try (FileInputStream fis = new FileInputStream(configFile)) {
            Yaml yaml = new Yaml();
            Map<String, Object> config = yaml.load(fis);
            if (config.containsKey("server.port")) {
                return config.get("server.port").toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "8080"; // Port par d√©faut
    }
}
