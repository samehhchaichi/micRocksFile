
# ================================
# ðŸ“Œ MainApp.java (Lancement de l'UI JavaFX)
# ================================
package com.example;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

import java.io.IOException;

public class MainApp extends Application {

    @Override
    public void start(Stage primaryStage) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/main-view.fxml"));
            BorderPane root = loader.load();

            Controller controller = loader.getController();
            controller.setPrimaryStage(primaryStage);

            Scene scene = new Scene(root, 800, 600);
            primaryStage.setTitle("Gestionnaire de Services Spring Boot");
            primaryStage.setScene(scene);
            primaryStage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Erreur lors du chargement de l'interface FXML");
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}

# ================================
# ðŸ“Œ Service.java (ModÃ¨le de donnÃ©es)
# ================================
package com.example;

import javafx.beans.property.SimpleStringProperty;

public class Service {
    private final SimpleStringProperty name;
    private final SimpleStringProperty port;
    private final SimpleStringProperty status;

    public Service(String name, String port, String status) {
        this.name = new SimpleStringProperty(name);
        this.port = new SimpleStringProperty(port);
        this.status = new SimpleStringProperty(status);
    }

    public String getName() { return name.get(); }
    public String getPort() { return port.get(); }
    public String getStatus() { return status.get(); }

    public void setStatus(String newStatus) { status.set(newStatus); }
}

# ================================
# ðŸ“Œ ServiceScanner.java (DÃ©tection des services Spring Boot)
# ================================
package com.example;

import org.yaml.snakeyaml.Yaml;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class ServiceScanner {

    public static List<Service> scanForServices(File rootDir) {
        List<Service> services = new ArrayList<>();
        if (rootDir != null && rootDir.isDirectory()) {
            scanDirectory(rootDir, services);
        }
        return services;
    }

    private static void scanDirectory(File directory, List<Service> services) {
        for (File subDir : Objects.requireNonNull(directory.listFiles(File::isDirectory))) {
            File pomFile = new File(subDir, "pom.xml");
            File configFile = new File(subDir, "config-local/application-dev.yml");

            if (pomFile.exists() && configFile.exists()) {
                String artifactId = extractArtifactId(pomFile);
                String port = extractServerPort(configFile);
                services.add(new Service(artifactId, port, "ðŸ”´ StoppÃ©"));
            } else {
                scanDirectory(subDir, services);
            }
        }
    }

    private static String extractArtifactId(File pomFile) {
        try (Scanner scanner = new Scanner(pomFile)) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (line.startsWith("<artifactId>")) {
                    return line.replaceAll("<artifactId>(.*?)</artifactId>", "$1").trim();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "Inconnu";
    }

    private static String extractServerPort(File configFile) {
        try (FileInputStream fis = new FileInputStream(configFile)) {
            Yaml yaml = new Yaml();
            Map<String, Object> config = yaml.load(fis);
            if (config.containsKey("server.port")) {
                return config.get("server.port").toString();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "8080"; // Port par dÃ©faut
    }
}

# ================================
# ðŸ“Œ ServiceManager.java (Gestion des processus)
# ================================
package com.example;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ServiceManager {
    private static final Map<String, Process> runningProcesses = new HashMap<>();

    public static void startService(Service service) {
        if (runningProcesses.containsKey(service.getName())) return;

        try {
            ProcessBuilder builder = new ProcessBuilder("mvn", "spring-boot:run");
            builder.directory(new File(service.getName())); 
            builder.redirectErrorStream(true);
            Process process = builder.start();
            runningProcesses.put(service.getName(), process);
            service.setStatus("ðŸŸ¡ En cours...");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void stopService(Service service) {
        Process process = runningProcesses.get(service.getName());
        if (process != null) {
            process.destroy();
            runningProcesses.remove(service.getName());
            service.setStatus("ðŸ”´ StoppÃ©");
        }
    }
}

# ================================
# ðŸ“Œ Controller.java (Gestion UI)
# ================================
package com.example;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.DirectoryChooser;
import javafx.stage.Stage;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import java.io.File;
import java.util.List;

public class Controller {
    @FXML private TextField directoryField;
    @FXML private TableView<Service> serviceTable;
    @FXML private TableColumn<Service, String> nameColumn, portColumn, statusColumn;
    @FXML private Button startButton, stopButton, logsButton;
    
    private final ObservableList<Service> servicesList = FXCollections.observableArrayList();
    private Stage primaryStage;

    public void setPrimaryStage(Stage primaryStage) { this.primaryStage = primaryStage; }

    @FXML
    private void initialize() {
        nameColumn.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
        portColumn.setCellValueFactory(cellData -> cellData.getValue().portProperty());
        statusColumn.setCellValueFactory(cellData -> cellData.getValue().statusProperty());
        serviceTable.setItems(servicesList);
    }

    @FXML
    private void handleBrowseDirectory() {
        DirectoryChooser chooser = new DirectoryChooser();
        chooser.setTitle("SÃ©lectionner un dossier");
        File selectedDirectory = chooser.showDialog(primaryStage);
        if (selectedDirectory != null) {
            directoryField.setText(selectedDirectory.getAbsolutePath());
            servicesList.setAll(ServiceScanner.scanForServices(selectedDirectory));
        }
    }

    @FXML private void handleStartServices() { servicesList.forEach(ServiceManager::startService); }
    @FXML private void handleStopAllServices() { servicesList.forEach(ServiceManager::stopService); }
}
